package com.taotao.redboy.activity;

import java.util.List;

import android.content.Intent;
import android.content.SharedPreferences;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.google.gson.Gson;
import com.lidroid.xutils.BitmapUtils;
import com.lidroid.xutils.DbUtils;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.exception.DbException;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.taotao.redboy.R;
import com.taotao.redboy.bean.CheckBean;
import com.taotao.redboy.bean.CheckBean.Delivery;
import com.taotao.redboy.bean.CheckBean.Payment;
import com.taotao.redboy.bean.CheckBean.Product;
import com.taotao.redboy.bean.UserAddress;
import com.taotao.redboy.utils.APPRes;
import com.taotao.redboy.view.MyListView;

public class CheckActivity extends BaseActivity {

	private static final int REQ_CHOOSE_PAY_METHOD = 200;
	private static final int REQ_CHOOSE_SALE_TICKET = 200;
	private static final int REQ_CHOOSE_SEND_TIME = 400;
	public static final int RES_CHOOSE_PAY_METHOD = 210;
	public static final int RES_CHOOSE_SALE_TICKET = 310;
	public static final int RES_CHOOSE_SEND_TIME= 410;
	private Button back;
	private TextView tvHead;

	@ViewInject(R.id.tv_total_num)
	private TextView tvTotalNum;
	@ViewInject(R.id.tv_total_point)
	private TextView tvTotalPrice;
	@ViewInject(R.id.tv_total_price)
	private TextView tvTotalPoint;
	@ViewInject(R.id.btn_head_right)
	private Button btnRight;
	@ViewInject(R.id.list_view_cart)
	private MyListView myListView;
	@ViewInject(R.id.ll_consumer_info)
	private LinearLayout ll_consumer_info;
	@ViewInject(R.id.ll_sale_ticket)
	private LinearLayout ll_sale_ticket;
	@ViewInject(R.id.ll_pay_method)
	private LinearLayout ll_pay_method;
	@ViewInject(R.id.ll_send_time)
	private LinearLayout ll_send_time;
	@ViewInject(R.id.tv_name)
	private TextView tvName;
	@ViewInject(R.id.tv_tel)
	private TextView tvTel;
	@ViewInject(R.id.tv_address)
	private TextView tvAddress;
	@ViewInject(R.id.tv_pay_method)
	private TextView tvPayMethod;
	@ViewInject(R.id.tv_sales_ticket)
	private TextView tvSaleTicket;
	@ViewInject(R.id.tv_send_time)
	private TextView tvSendTime;
	@ViewInject(R.id.btn_submit)
	private Button btnSubmit;

	private int payMethod = -1;
	private int saleTicket = -1;
	private int sendTime = -1;

	@Override
	public void initView() {
		ViewUtils.inject(this);
		sp = getSharedPreferences("config", MODE_PRIVATE);
		dbUtils = DbUtils.create(context, "addresses.db");
		addressId = sp.getInt("addressId", -1);
		String userIdString = sp.getString("userid","3");
		userId=Integer.parseInt(userIdString);

		bitmapUtils = new BitmapUtils(context);

		back = (Button) findViewById(R.id.back);
		tvHead = (TextView) findViewById(R.id.tv_head);
		tvHead.setText("结算中心");
		back.setVisibility(View.GONE);
		btnRight.setText("提交订单");

		/**
		 * 如果payMethod==-1 就设置支付方式为隐藏状态
		 */

		if (payMethod == -1) {

			tvPayMethod.setVisibility(View.GONE);
		}
		if (saleTicket == -1) {

			tvSaleTicket.setVisibility(View.GONE);
		}
		if (sendTime == -1) {
			
			tvSendTime.setVisibility(View.GONE);
		}
	}

	@Override
	public void initData() {

		try {

			List<UserAddress> userAddresses = dbUtils
					.findAll(UserAddress.class);

			if (userAddresses != null && userAddresses.size() > 0) {

				System.out.println("&&&&&&&&&&&&&&&&&&&&&"
						+ userAddresses.get(0).toString());
			}

			myUserAddress = null;
			if (userAddresses!=null) {
				for (int i = 0; i < userAddresses.size(); i++) {
					
					UserAddress address = userAddresses.get(i);
					if (address.userId == userId) {
						myUserAddress = address;
					}
					
				}
			}

			/**
			 * 设置收货人信息,如果当前没有收货地址，提醒用户选择收货地址
			 */
			if (myUserAddress==null) {
				tvName.setText("请选择或则新增收货地址");
				tvAddress.setVisibility(View.GONE);
				tvTel.setVisibility(View.GONE);
			}else {
				tvName.setVisibility(View.VISIBLE);
				tvAddress.setVisibility(View.VISIBLE);
				tvTel.setVisibility(View.VISIBLE);
				tvName.setText(myUserAddress.name);
				tvTel.setText(myUserAddress.phoneNumber);
				tvAddress.setText(myUserAddress.province + myUserAddress.city
						+ myUserAddress.area + myUserAddress.addressDetail);
				System.out.println("******************************"
						+ myUserAddress.toString());
			}

		} catch (DbException e1) {
			e1.printStackTrace();
		}
		try {
			UserAddress address = dbUtils
					.findById(UserAddress.class, addressId);
			if (address != null) {

				System.out.println(address.toString());
			}

		} catch (DbException e) {
			e.printStackTrace();
		}
		httpUtils = new HttpUtils();

		RequestParams params = new RequestParams();

		params.addBodyParameter("sku", "3:3:1,3|5:2:2,3");
		httpUtils.send(HttpMethod.POST, APPRes.BASE_URL + APPRes.checkout_url,
				params, new RequestCallBack<String>() {

					@Override
					public void onSuccess(ResponseInfo<String> responseInfo) {

						System.out.println("onSuccess:" + responseInfo.result);
						String jsonResult = responseInfo.result;
						parseJson(jsonResult);
					}

					@Override
					public void onFailure(HttpException error, String msg) {
						System.out.println("联网发生错误::" + msg);
					}
				});
	}

	@Override
	public void initLinstener() {

		back.setOnClickListener(this);
		ll_pay_method.setOnClickListener(this);

		ll_consumer_info.setOnClickListener(this);
		ll_sale_ticket.setOnClickListener(this);
		
		ll_send_time.setOnClickListener(this);
		
		btnRight.setOnClickListener(this);
		btnSubmit.setOnClickListener(this);

	}

	@Override
	public int getLayout() {
		return R.layout.activity_check;
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.back:
			finish();
		break;
		case R.id.ll_pay_method:
			toChoosePayMethodActivity();

			break;
		case R.id.ll_consumer_info:
			jumpToActivity(AddressListActivity.class);
			break;
		case R.id.ll_sale_ticket:
			toChooseSaleTicketActivity();
			break;
		case R.id.ll_send_time:
			toChooseSendTimeActivity();
			break;
		case R.id.btn_submit:
			submitOrder();
			break;

		}
	}

	private void toChooseSendTimeActivity() {

		Intent intent=new Intent(this,SendTimeActivity.class);
		startActivityForResult(intent, REQ_CHOOSE_SEND_TIME);
		
	}

	/**
	 * 做提交订单的方法
	 */
	private void submitOrder() {

		/**
		 * 
		 * Sku 商品ID:数量:属性ID|商品ID:数量:属性ID 1200001:3:1,2|1200004:2:2,3 //
		 * addressid 地址簿ID 1001 // paymentid 支付方式 1 // deliveryid 送货时间 1 //
		 * invoicetype 发票类型 1=>个人 2=>单位 // invoicetitle 发票抬头 北京红孩子互联科技有限公司 //
		 * invoicecontent 发票内容 1
		 * ?userid=23
		 * &sku=101211:200:2,3|10211:200:4,3
		 * &addressid
		 * =1001
		 * &paymentid=2
		 * &deliveryid=1
		 * &invoicetype=1
		 * &invoicetitle=红孩子
		 * &invoicecontent=1
		 */
		System.out.println("提交订单");
		RequestParams params=new RequestParams();
		int userId = sp.getInt("userId", -1);
		params.addBodyParameter("userid", ""+userId);
		params.addBodyParameter("addressid", ""+myUserAddress.id);
		params.addBodyParameter("paymentid", ""+payMethod+1);
		params.addBodyParameter("invoicetype", ""+1);//发票类型
		params.addBodyParameter("invoicetitle", "北京红孩子互联科技有限公司");//发票类型
		params.addBodyParameter("invoicecontent", "1");//发票类型
		params.addBodyParameter("deliveryid", "2");//deliveryid
		
		
		StringBuffer buffer=new StringBuffer();
		
		for (int i = 0; i < productsList.size(); i++) {
			
			Product product = productsList.get(i);
			buffer.append(product.id+":").append(product.prodNum+":"+"1,2");//商品sku信息
			if (i<productsList.size()-1) {
				buffer.append("|");
			}
		}
		
		String sku=buffer.toString();
		System.out.println("sku====="+buffer.toString());
		params.addBodyParameter("sku", sku);
		
		httpUtils.send(HttpMethod.POST, APPRes.BASE_URL+APPRes.address_order_submit, params, new RequestCallBack<String>() {

			@Override
			public void onSuccess(ResponseInfo<String> responseInfo) {
				
				System.out.println("提交成功");
				
				System.out.println(responseInfo.result);
			}

			@Override
			public void onFailure(HttpException error, String msg) {
				
			}
		});
	}

	private void toChooseSaleTicketActivity() {

		Intent intent = new Intent(this, SaleTicketActivity.class);
		startActivityForResult(intent, REQ_CHOOSE_SALE_TICKET);

	}

	private void toChoosePayMethodActivity() {

		Intent intent = new Intent(this, ChoosePayMethodActivity.class);
		startActivityForResult(intent, REQ_CHOOSE_PAY_METHOD);

	}

	private void jumpToActivity(Class<? extends BaseActivity> claz) {

		Intent intent = new Intent(this, claz);
		startActivity(intent);
	}

	private MyAdapter adapter;
	private SharedPreferences sp;
	private DbUtils dbUtils;
	private int addressId;
	private int userId;
	private UserAddress myUserAddress;
	private List<Delivery> deliveriyList;
	private List<Payment> paymentsList;
	private List<Product> productsList;
	private BitmapUtils bitmapUtils;
	private HttpUtils httpUtils;

	protected void parseJson(String json) {

		Gson gson = new Gson();
		CheckBean checkBean = gson.fromJson(json, CheckBean.class);
		deliveriyList = checkBean.deliveryList;
		paymentsList = checkBean.paymentList;
		productsList = checkBean.productList;
		adapter = new MyAdapter();
		myListView.setAdapter(adapter);
		adapter.notifyDataSetChanged();
	}

	private class MyAdapter extends BaseAdapter {

		@Override
		public int getCount() {
			return productsList.size();
		}

		@Override
		public Object getItem(int position) {
			return productsList.get(position);
		}

		@Override
		public long getItemId(int position) {
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			ViewHolder holder = null;
			if (convertView == null) {
				holder = new ViewHolder();
				convertView = View.inflate(context,
						R.layout.good_info_list_item, null);
				holder.tvColor = (TextView) convertView
						.findViewById(R.id.tv_color);
				holder.tvNum = (TextView) convertView.findViewById(R.id.tv_num);
				holder.tvPrice = (TextView) convertView
						.findViewById(R.id.tv_price);
				holder.tvSum = (TextView) convertView.findViewById(R.id.tv_sum);
				holder.ivIcon = (ImageView) convertView
						.findViewById(R.id.iv_icon);
				holder.tvTitle = (TextView) convertView
						.findViewById(R.id.tv_title);
				convertView.setTag(holder);
			} else {
				holder = (ViewHolder) convertView.getTag();
			}
			Product product = productsList.get(position);
			System.out.println("***************************");
			holder.tvNum.setText("" + product.prodNum);
			holder.tvPrice.setText("" + product.price);
			holder.tvSum.setText("" + product.price * product.prodNum);
			holder.tvTitle.setText(product.name);

			String imgUrl = APPRes.BASE_URL + product.pic.picUrl;

			/**
			 *  "http://192.168.0.100:8080/ECServicez8/images/12.jpg"
			 */
			bitmapUtils.display(holder.ivIcon, imgUrl);

			return convertView;
		}

	}

	/*
	 * @Override protected void onResume() { super.onResume();
	 * 
	 * int payMethod = sp.getInt("pay_method", -1);
	 * 
	 * switch (payMethod) { case 0: tvPayMethod.setText("到付-现金"); break;
	 * 
	 * case 1: tvPayMethod.setText("到付-pos"); break; case 2:
	 * tvPayMethod.setText("支付宝支付"); break; }
	 * 
	 * }
	 */

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		System.out.println("resultCode:" + resultCode);
		if (resultCode == RES_CHOOSE_PAY_METHOD) {
			tvPayMethod.setVisibility(View.VISIBLE);
			payMethod = data.getIntExtra("pay_method", -1);

			System.out.println("payMethod" + payMethod);
			switch (payMethod) {
			case 0:
				tvPayMethod.setText("到付-现金");
				break;
			case 1:
				tvPayMethod.setText("到付-pos");
				break;
			case 2:
				tvPayMethod.setText("支付宝支付");
				break;
			default:
				tvPayMethod.setText("未选择");
				break;
			}
		}
		if (resultCode == RES_CHOOSE_SALE_TICKET) {
			tvSaleTicket.setVisibility(View.VISIBLE);
			saleTicket = data.getIntExtra("sale_ticket", -1);

			System.out.println("saleTicket" + saleTicket);
			switch (saleTicket) {
			case 0:
				tvSaleTicket.setText("9月惊喜50元礼券");
				break;
			case 1:
				tvSaleTicket.setText("国亲节80元礼券");
				break;
			case 2:
				tvSaleTicket.setText("圣诞节大放送80元礼券");
				break;
			default:
				tvSaleTicket.setText("未选择");
				break;
			}
		}
		/**
		 * 送货时间    
		 * 1. 周一到周五送货  type=1
		 * 2. 双休日及公众假期送货 type=2
		 * 3. 时间不限，工作日双休日及公众假期均可送货 type=3
		 */
		if (resultCode == RES_CHOOSE_SEND_TIME) {
			tvSendTime.setVisibility(View.VISIBLE);
			sendTime = data.getIntExtra("send_time", -1);
			
			System.out.println("send_time" + sendTime);
			switch (sendTime) {
			case 0:
				tvSendTime.setText("周一到周五送货");
				break;
			case 1:
				tvSendTime.setText("双休日及公众假期送货");
				break;
			case 2:
				tvSendTime.setText("时间不限，工作日双休日及公众假期均可送货");
				break;
			default:
				tvSendTime.setText("未选择");
				break;
			}
		}
	}

	private class ViewHolder {
		ImageView ivIcon;
		TextView tvTitle, tvNum, tvSum, tvPrice, tvColor;

	}

}
